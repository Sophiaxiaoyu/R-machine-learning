knitr::opts_chunk$set(echo = TRUE)
N <- 21
v <- 4.2
### set input arguments !!!
log_post_sigma_unnorm <- function(sigma, N, v, lambda)
{
-N / 2 * log(sigma^2) - N * v / (2 * sigma^2) - lambda * sigma
}
tibble::tibble(
sigma = seq(0.5, 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_sigma_unnorm(sigma, N, v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = sigma, y = log_post))+
geom_line()
library(tidyverse)
tibble::tibble(
sigma = seq(0.5, 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_sigma_unnorm(sigma, N, v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = sigma, y = log_post))+
geom_line()
### set the input arguments !!!
log_post_varphi_unnorm <- function(varphi, N, v, lambda )
{
# back-calculate sigma given varphi
sigma <- exp(varphi)
# calculate the unnormalized log-posterior on sigma
log_post <- log_post_sigma_unnorm(sigma, N, v, lambda)
# account for the derivative adjustment
log_post + varphi
}
tibble::tibble(
varphi = seq(log(0.5), log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi,N,v,0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
tibble::tibble(
x = seq(-5*pi/8, 9*pi/8, length.out = 1001)
) %>%
ggplot(mapping = aes(x = x, y = sin(x)))+
geom_line()
opt_sine_01 <- optim( 0,
sin,
gr = NULL,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE,
control = list(fnscale=-1))
opt_sine_02 <- optim( 3,
sin,
gr = NULL,
method = "Brent",
lower = -5*pi/8, upper = 9*pi/8,
hessian = TRUE,
control = list(fnscale=-1))
my_func <- function(x,constants )
{
-exp((x-constants$a)^constants$m)
}
my_constants <- list(a = 0.7,m = 2)
tibble::tibble(
x = seq(-0.5,2,length.out = 501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+
geom_line()
opt_result <- optim( 1.75,
my_func,
gr = NULL,
my_constants,
method = "Brent",
lower = -0.5, upper = 2,
hessian = TRUE,
control = list(fnscale=-1 ))
opt_result
tibble::tibble(
x = seq(-0.5,2,length.out = 501)
) %>%
ggplot(mapping = aes(x = x,
y = my_func(x,my_constants)))+
geom_line()+
geom_vline(xintercept = opt_result$par, color = "red")
varphi_opt_a <- optim( -0.5,
log_post_varphi_unnorm,
gr = NULL,
N,v,0.75,
method = 'BFGS',
hessian = TRUE,
control = list(fnscale=-1 ))
varphi_opt_a
varphi_opt_b <- optim(1.35,
log_post_varphi_unnorm,
gr = NULL,
N,v,0.75,
method = 'BFGS',
hessian = TRUE,
control = list(fnscale=-1 ))
varphi_opt_b
tibble::tibble(
varphi = seq(log(0.5), log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi,N,v,0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()+
geom_vline(xintercept = varphi_opt_a$par,
color = 'red')
tibble::tibble(
sigma = seq(0.5, 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_sigma_unnorm(sigma, N, v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = sigma, y = log_post))+
geom_line()
tibble::tibble(
varphi = seq(log(0.5), log(4.5), length.out = 101)
) %>%
mutate(log_post = log_post_varphi_unnorm(varphi,N,v,0.75)) %>%
ggplot(mapping = aes(x = varphi, y = log_post)) +
geom_line()
tibble::tibble(
sigma = seq(0.5, 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_sigma_unnorm(sigma, N = N, v = v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = sigma, y = log_post))+
geom_line()
tibble::tibble(
sigma = seq(0.5, 4.5, length.out = 101)
) %>%
mutate(log_post = log_post_sigma_unnorm(sigma, N = N, v = v, lambda = 0.75)) %>%
ggplot(mapping = aes(x = sigma, y = log_post))+
geom_line()
