data12<- select(trueth12,n)
value12=data12$n
trueth_tn<- filter(data9,pred_class=="event"&obs_class=="non_event")
data_tn<- select(trueth_tn,n)
value_tn=data_tn$n
Sensitivity2=value10/(value10+value12)
Specificity2=value11/(value11+value_tn)
FPR2=1-Specificity2
data13=model_class_0.3%>%count(pred_class,obs_class)
trueth14<- filter(data13,pred_class=="event"&obs_class=="event")
data14<- select(trueth14,n)
value14=data14$n
trueth15<- filter(data13,pred_class=="event"&obs_class=="non_event")
data15<- select(trueth15,n)
value15=data15$n
trueth16<- filter(data13,pred_class=="non_event"&obs_class=="event")
data16<- select(trueth16,n)
value16=data16$n
trueth17<- filter(data13,pred_class=="non_event"&obs_class=="non_event")
data17<- select(trueth17,n)
value17=data17$n
Accuracy2=(value14+value17)/(value14+value15+value16+value17)
data18=model_class_0.3%>%count(pred_class,obs_class)
trueth19<- filter(data18,pred_class=="event"&obs_class=="event")
data19<- select(trueth19,n)
value19=data19$n
trueth20<- filter(data18,pred_class=="non_event"&obs_class=="non_event")
data20<- select(trueth20,n)
value20=data20$n
trueth21<- filter(data18,pred_class=="non_event"&obs_class=="event")
data21<- select(trueth21,n)
value21=data21$n
trueth22<- filter(data18,pred_class=="event"&obs_class=="non_event")
data22<- select(trueth22,n)
value22=data22$n
Sensitivity3=value19/(value19+value21)
Specificity3=value20/(value20+value22)
FPR3=1-Specificity3
library(ggplot2)
data23 <- data.frame(Sensitivity = c(0.53030303030303, 0.393939393939394, 0.727272727272727),FPR = c(0.101694915254237, 0.0169491525423728, 0.305084745762712))
ggplot(data=data23,mapping = aes(x=Sensitivity,y=FPR))+
geom_point()+
geom_abline(slope=1,intercept=0)+
coord_equal(xlim=c(0,1), ylim=c(0,1))
train_data_path <- 'hw03_train_data.csv'
df <- readr::read_csv(train_data_path, col_names = TRUE)
df <- df %>%
mutate(y = factor(y, levels = c("event", "non_event")))
df %>% glimpse()
table(df$y)
prop.table(table(df$y))
library(caret)
library(yardstick)
ctrl_acc <- trainControl(method = "cv", number = 10)
metric_acc <- "Accuracy"
### model 1
set.seed(2021)
mod_1_acc <- train(y ~ x1 + x2 + x3 + x4, data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 2
set.seed(2021)
mod_2_acc <- train(y ~ x1 + x2 + x3 + x4 + I(x1^2) + I(x2^2) + I(x3^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 3
set.seed(2021)
mod_3_acc <- train(y ~ x1 + x2 + I(x1^2) + I(x2^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 4
set.seed(2021)
mod_4_acc <- train(y ~ x1 + x3 + I(x1^2) + I(x3^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 5
set.seed(2021)
mod_5_acc <- train(y ~ x1 + x4 + I(x1^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 6
set.seed(2021)
mod_6_acc <- train(y ~ x2 + x3 + I(x2^2) + I(x3^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 7
set.seed(2021)
mod_7_acc <- train(y ~ x2 + x4 + I(x2^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 8
set.seed(2021)
mod_8_acc <- train(y ~ x3 + x4 + I(x3^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
acc_results <- resamples(list(mod_1 =mod_1_acc ,
mod_2 =mod_2_acc ,
mod_3 =mod_3_acc ,
mod_4 =mod_4_acc ,
mod_5 =mod_5_acc ,
mod_6 =mod_6_acc ,
mod_7 =mod_7_acc ,
mod_8 =mod_8_acc ))
summary(acc_results,metric = "Accuracy")
dotplot(acc_results,metric = "Accuracy")
confusionMatrix(mod_3_acc)
confusionMatrix(mod_2_acc)
confusionMatrix(mod_8_acc)
confusionMatrix(mod_5_acc)
ctrl_roc <- trainControl( method = "cv", number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
metric_roc <- 'ROC'
### model 1
set.seed(2021)
mod_1_roc <- train(y ~ x1 + x2 + x3 + x4, data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 2
set.seed(2021)
mod_2_roc <- train(y ~ x1 + x2 + x3 + x4 + I(x1^2) + I(x2^2) + I(x3^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 3
set.seed(2021)
mod_3_roc <- train(y ~ x1 + x2 + I(x1^2) + I(x2^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 4
set.seed(2021)
mod_4_roc <- train(y ~ x1 + x3 + I(x1^2) + I(x3^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 5
set.seed(2021)
mod_5_roc <- train(y ~ x1 + x4 + I(x1^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 6
set.seed(2021)
mod_6_roc <- train(y ~ x2 + x3 + I(x2^2) + I(x3^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 7
set.seed(2021)
mod_7_roc <- train(y ~ x2 + x4 + I(x2^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 8
set.seed(2021)
mod_8_roc <- train(y ~ x3 + x4 + I(x3^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
roc_results <- resamples(list(mod_1 = mod_1_roc,
mod_2 = mod_2_roc,
mod_3 = mod_3_roc,
mod_4 = mod_4_roc,
mod_5 = mod_5_roc,
mod_6 = mod_6_roc,
mod_7 = mod_7_roc,
mod_8 = mod_8_roc))
summary(roc_results,metric = metric_roc)
dotplot(roc_results,metric = metric_roc)
summary(roc_results)
dotplot(roc_results)
mod_1_roc$pred %>% tibble::as_tibble()
roc_curve(data=mod_1_roc$pred , obs, event)
roc_curve(data=mod_1_roc$pred , obs, event)%>%autoplot()
mod_1_roc$pred%>%group_by(Resample)%>%roc_curve(obs, event)%>%autoplot()
compile_all_model_preds <- function(m1, m2, m3, m4, m5, m6, m7, m8)
{
purrr::map2_dfr(list(m1, m2, m3, m4, m5, m6, m7, m8),
as.character(seq_along(list(m1, m2, m3, m4, m5, m6, m7, m8))),
function(ll, lm){
ll$pred %>% tibble::as_tibble() %>%
select(obs, event, Resample) %>%
mutate(model_name = lm)
})
}
all_model_preds <- compile_all_model_preds(mod_1_roc, mod_2_roc, mod_3_roc,
mod_4_roc, mod_5_roc,
mod_6_roc, mod_7_roc, mod_8_roc)
all_model_preds
all_model_preds%>%group_by(model_name)%>%roc_curve(obs,event)%>%autoplot()
test_data_path <- 'hw03_test_data.csv'
df_test <- readr::read_csv(test_data_path, col_names = TRUE)
df_test <- df_test %>%
mutate(y = factor(y, levels = c("event", "non_event")))
df_test %>% glimpse()
pred_test_1<-predict(mod_1_roc,df_test,type = 'prob')
head(pred_test_1)
test_df_1 <- df_test %>% bind_cols(pred_test_1)
tibble::tibble(x = 0:100) %>%
mutate(x_bins = cut(x,
breaks = seq(0, 100, by = 10),
include.lowest = TRUE)) %>%
count(x_bins)
test_df_1_b<-test_df_1%>%mutate(pred_bin=cut(pred_test_1$event, breaks = seq(0, 1, by = 0.1),include.lowest = TRUE))
count(test_df_1_b,pred_bin)
ggplot(data=test_df_1_b)+
geom_bar(mapping = aes(x=pred_bin),color="blue")
ggplot(data=test_df_1_b)+
geom_bar(mapping =aes(x=pred_bin,fill=y))+
scale_color_brewer(palette='Set1')
ggplot(data=test_df_1_b)+
geom_bar(mapping =aes(x=pred_bin,fill=y),position = "fill")+
scale_color_brewer(palette='Set1')
my_calcurve_1 <- test_df_1_b %>% tibble()%>%group_by(pred_bin)%>%summarize(prop_event = mean(event))
mid_bin1<-c(0.05,0.15,0.25,0.35,0.45,0.55,0.65,0.75,0.85,0.95)
my_calcurve_1$mid_bin<-mid_bin1
my_calcurve_1
my_calcurve_1%>%ggplot(mapping = aes(x=mid_bin,y=prop_event))+
geom_line()+
geom_point()+
geom_abline(slope=1,intercept=0,color='grey',linetype='dashed')+
coord_equal(xlim = c(0,1),ylim = c(0,1))
pred_test_3<-predict(mod_3_roc,df_test,type = 'prob')
head(pred_test_3)
pred_test_8<-predict(mod_8_roc,df_test,type = 'prob')
head(pred_test_8)
test_df_3 <- df_test %>% bind_cols(pred_test_3)
test_df_8 <- df_test %>% bind_cols(pred_test_8)
test_df_3_b<-test_df_3%>%mutate(pred_bin=cut(pred_test_3$event, breaks = seq(0, 1, by = 0.1),include.lowest = TRUE))
test_df_8_b<-test_df_8%>%mutate(pred_bin=cut(pred_test_8$event, breaks = seq(0, 1, by = 0.1),include.lowest = TRUE))
ggplot(data=test_df_3_b)+
geom_bar(mapping = aes(x=pred_bin),color="blue")
ggplot(data=test_df_8_b)+
geom_bar(mapping = aes(x=pred_bin),color="blue")
my_calcurve_3 <- test_df_3_b %>% tibble()%>%group_by(pred_bin)%>%summarize(prop_event = mean(event))
my_calcurve_3$mid_bin<-mid_bin1
my_calcurve_3
my_calcurve_8 <- test_df_8_b %>% tibble()%>%group_by(pred_bin)%>%summarize(prop_event = mean(event))
mid_bin2<-c(0.35,0.45,0.55,0.65,0.75)
my_calcurve_8$mid_bin<-mid_bin2
my_calcurve_8
my_calcurve_3%>%ggplot(mapping = aes(x=mid_bin,y=prop_event))+
geom_line()+
geom_point()+
geom_abline(slope=1,intercept=0,color='grey',linetype='dashed')+
coord_equal(xlim = c(0,1),ylim = c(0,1))
my_calcurve_8%>%ggplot(mapping = aes(x=mid_bin,y=prop_event))+
geom_line()+
geom_point()+
geom_abline(slope=1,intercept=0,color='grey',linetype='dashed')+
coord_equal(xlim = c(0,1),ylim = c(0,1))
caret::calibration(test_df_1$y ~ test_df_1$event ,test_df_1,cuts = 10)%>%xyplot()
caret::calibration(test_df_3$y ~ test_df_3$event,test_df_3,cuts = 10)%>%xyplot()
caret::calibration(test_df_8$y ~ test_df_8$event,test_df_8,cuts = 10)%>%xyplot()
library(ggplot2)
data23 <- data.frame(Sensitivity = c(0.53030303030303, 0.393939393939394, 0.727272727272727),FPR = c(0.101694915254237, 0.0169491525423728, 0.305084745762712))
ggplot(data=data23,mapping = aes(x=FPR,y=Sensitivity))+
geom_point()+
geom_abline(slope=1,intercept=0)+
coord_equal(xlim=c(0,1), ylim=c(0,1))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
example_data_path <- "hw03_example_binary_data.csv"
model_pred_df <- readr::read_csv(example_data_path, col_names = TRUE)
model_pred_df %>% glimpse()
model_pred_df %>% count(obs_class)
mean(model_pred_df$obs_class == "event")
iris %>%
slice(1:10) %>%
select(starts_with("Sepal"), Species) %>%
mutate(width_factor = ifelse(Sepal.Width > 3.5,
"greater than",
"less than"))
model_pred_df <- mutate(model_pred_df,y = ifelse(obs_class =="event", 1 ,0 ))
ggplot(data=model_pred_df, mapping = aes(x=x,y=y))+
geom_point(size=3.5,alpha=0.5)
summary(model_pred_df$pred_prob)
ggplot(data=model_pred_df)+
geom_line(mapping = aes(x=x,y=pred_prob),color="red")+
geom_point(mapping = aes(x=x,y=y),size=3.5,alpha=0.5)
model_class_0.5 <- mutate(model_pred_df %>% tibble(),
pred_class = ifelse(pred_prob > 0.5,
"event",
"non_event"))
Accuracy_0.5<-mean(model_class_0.5$pred_class == model_class_0.5$obs_class)
model_class_0.5%>%count(pred_class,obs_class)
data1=model_class_0.5%>%count(pred_class,obs_class)
trueth1<- filter(data1,pred_class=="event"&obs_class=="event")
data2<- select(trueth1,n)
value1=data2$n
trueth2<- filter(data1,pred_class=="non_event"&obs_class=="non_event")
data3<- select(trueth2,n)
value2=data3$n
trueth222<- filter(data1,pred_class=="event"&obs_class=="non_event")
data222<- select(trueth222,n)
value222=data222$n
trueth333<- filter(data1,pred_class=="non_event"&obs_class=="event")
data333<- select(trueth333,n)
value333=data333$n
Sensitivity1=value1/(value1+value333)
Specificity1=value2/(value2+value222)
FPR1=1-Specificity1
model_class_0.7 <- mutate(model_pred_df %>% tibble(),
pred_class = ifelse(pred_prob > 0.7,
"event",
"non_event"))
model_class_0.3 <- mutate(model_pred_df %>% tibble(),
pred_class = ifelse(pred_prob > 0.3,
"event",
"non_event"))
data4=model_class_0.7%>%count(pred_class,obs_class)
trueth5<- filter(data4,pred_class=="event"&obs_class=="event")
data5<- select(trueth5,n)
value5=data5$n
trueth6<- filter(data4,pred_class=="event"&obs_class=="non_event")
data6<- select(trueth6,n)
value6=data6$n
trueth7<- filter(data4,pred_class=="non_event"&obs_class=="event")
data7<- select(trueth7,n)
value7=data7$n
trueth8<- filter(data4,pred_class=="non_event"&obs_class=="non_event")
data8<- select(trueth8,n)
value8=data8$n
Accuracy1=(value5+value8)/(value5+value6+value7+value8)
data9=model_class_0.7%>%count(pred_class,obs_class)
trueth10<- filter(data9,pred_class=="event"&obs_class=="event")
data10<- select(trueth10,n)
value10=data10$n
trueth11<- filter(data9,pred_class=="non_event"&obs_class=="non_event")
data11<- select(trueth11,n)
value11=data11$n
trueth12<- filter(data9,pred_class=="non_event"&obs_class=="event")
data12<- select(trueth12,n)
value12=data12$n
trueth_tn<- filter(data9,pred_class=="event"&obs_class=="non_event")
data_tn<- select(trueth_tn,n)
value_tn=data_tn$n
Sensitivity2=value10/(value10+value12)
Specificity2=value11/(value11+value_tn)
FPR2=1-Specificity2
data13=model_class_0.3%>%count(pred_class,obs_class)
trueth14<- filter(data13,pred_class=="event"&obs_class=="event")
data14<- select(trueth14,n)
value14=data14$n
trueth15<- filter(data13,pred_class=="event"&obs_class=="non_event")
data15<- select(trueth15,n)
value15=data15$n
trueth16<- filter(data13,pred_class=="non_event"&obs_class=="event")
data16<- select(trueth16,n)
value16=data16$n
trueth17<- filter(data13,pred_class=="non_event"&obs_class=="non_event")
data17<- select(trueth17,n)
value17=data17$n
Accuracy2=(value14+value17)/(value14+value15+value16+value17)
data18=model_class_0.3%>%count(pred_class,obs_class)
trueth19<- filter(data18,pred_class=="event"&obs_class=="event")
data19<- select(trueth19,n)
value19=data19$n
trueth20<- filter(data18,pred_class=="non_event"&obs_class=="non_event")
data20<- select(trueth20,n)
value20=data20$n
trueth21<- filter(data18,pred_class=="non_event"&obs_class=="event")
data21<- select(trueth21,n)
value21=data21$n
trueth22<- filter(data18,pred_class=="event"&obs_class=="non_event")
data22<- select(trueth22,n)
value22=data22$n
Sensitivity3=value19/(value19+value21)
Specificity3=value20/(value20+value22)
FPR3=1-Specificity3
library(ggplot2)
data23 <- data.frame(Sensitivity = c(0.53030303030303, 0.393939393939394, 0.727272727272727),FPR = c(0.101694915254237, 0.0169491525423728, 0.305084745762712))
ggplot(data=data23,mapping = aes(x=FPR,y=Sensitivity))+
geom_point()+
geom_abline(slope=1,intercept=0)+
coord_equal(xlim=c(0,1), ylim=c(0,1))
train_data_path <- 'hw03_train_data.csv'
df <- readr::read_csv(train_data_path, col_names = TRUE)
df <- df %>%
mutate(y = factor(y, levels = c("event", "non_event")))
df %>% glimpse()
table(df$y)
prop.table(table(df$y))
library(caret)
library(yardstick)
ctrl_acc <- trainControl(method = "cv", number = 10)
metric_acc <- "Accuracy"
### model 1
set.seed(2021)
mod_1_acc <- train(y ~ x1 + x2 + x3 + x4, data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 2
set.seed(2021)
mod_2_acc <- train(y ~ x1 + x2 + x3 + x4 + I(x1^2) + I(x2^2) + I(x3^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 3
set.seed(2021)
mod_3_acc <- train(y ~ x1 + x2 + I(x1^2) + I(x2^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 4
set.seed(2021)
mod_4_acc <- train(y ~ x1 + x3 + I(x1^2) + I(x3^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 5
set.seed(2021)
mod_5_acc <- train(y ~ x1 + x4 + I(x1^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 6
set.seed(2021)
mod_6_acc <- train(y ~ x2 + x3 + I(x2^2) + I(x3^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 7
set.seed(2021)
mod_7_acc <- train(y ~ x2 + x4 + I(x2^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
### model 8
set.seed(2021)
mod_8_acc <- train(y ~ x3 + x4 + I(x3^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_acc, metric = metric_acc)
acc_results <- resamples(list(mod_1 =mod_1_acc ,
mod_2 =mod_2_acc ,
mod_3 =mod_3_acc ,
mod_4 =mod_4_acc ,
mod_5 =mod_5_acc ,
mod_6 =mod_6_acc ,
mod_7 =mod_7_acc ,
mod_8 =mod_8_acc ))
summary(acc_results,metric = "Accuracy")
dotplot(acc_results,metric = "Accuracy")
confusionMatrix(mod_3_acc)
confusionMatrix(mod_2_acc)
confusionMatrix(mod_8_acc)
confusionMatrix(mod_5_acc)
ctrl_roc <- trainControl( method = "cv", number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
metric_roc <- 'ROC'
### model 1
set.seed(2021)
mod_1_roc <- train(y ~ x1 + x2 + x3 + x4, data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 2
set.seed(2021)
mod_2_roc <- train(y ~ x1 + x2 + x3 + x4 + I(x1^2) + I(x2^2) + I(x3^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 3
set.seed(2021)
mod_3_roc <- train(y ~ x1 + x2 + I(x1^2) + I(x2^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 4
set.seed(2021)
mod_4_roc <- train(y ~ x1 + x3 + I(x1^2) + I(x3^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 5
set.seed(2021)
mod_5_roc <- train(y ~ x1 + x4 + I(x1^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 6
set.seed(2021)
mod_6_roc <- train(y ~ x2 + x3 + I(x2^2) + I(x3^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 7
set.seed(2021)
mod_7_roc <- train(y ~ x2 + x4 + I(x2^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
### model 8
set.seed(2021)
mod_8_roc <- train(y ~ x3 + x4 + I(x3^2) + I(x4^2), data = df, method = "glm", trControl = ctrl_roc, metric = metric_roc)
roc_results <- resamples(list(mod_1 = mod_1_roc,
mod_2 = mod_2_roc,
mod_3 = mod_3_roc,
mod_4 = mod_4_roc,
mod_5 = mod_5_roc,
mod_6 = mod_6_roc,
mod_7 = mod_7_roc,
mod_8 = mod_8_roc))
summary(roc_results,metric = metric_roc)
dotplot(roc_results,metric = metric_roc)
summary(roc_results)
dotplot(roc_results)
mod_1_roc$pred %>% tibble::as_tibble()
roc_curve(data=mod_1_roc$pred , obs, event)
roc_curve(data=mod_1_roc$pred , obs, event)%>%autoplot()
mod_1_roc$pred%>%group_by(Resample)%>%roc_curve(obs, event)%>%autoplot()
compile_all_model_preds <- function(m1, m2, m3, m4, m5, m6, m7, m8)
{
purrr::map2_dfr(list(m1, m2, m3, m4, m5, m6, m7, m8),
as.character(seq_along(list(m1, m2, m3, m4, m5, m6, m7, m8))),
function(ll, lm){
ll$pred %>% tibble::as_tibble() %>%
select(obs, event, Resample) %>%
mutate(model_name = lm)
})
}
all_model_preds <- compile_all_model_preds(mod_1_roc, mod_2_roc, mod_3_roc,
mod_4_roc, mod_5_roc,
mod_6_roc, mod_7_roc, mod_8_roc)
all_model_preds
all_model_preds%>%group_by(model_name)%>%roc_curve(obs,event)%>%autoplot()
test_data_path <- 'hw03_test_data.csv'
df_test <- readr::read_csv(test_data_path, col_names = TRUE)
df_test <- df_test %>%
mutate(y = factor(y, levels = c("event", "non_event")))
df_test %>% glimpse()
pred_test_1<-predict(mod_1_roc,df_test,type = 'prob')
head(pred_test_1)
test_df_1 <- df_test %>% bind_cols(pred_test_1)
tibble::tibble(x = 0:100) %>%
mutate(x_bins = cut(x,
breaks = seq(0, 100, by = 10),
include.lowest = TRUE)) %>%
count(x_bins)
test_df_1_b<-test_df_1%>%mutate(pred_bin=cut(pred_test_1$event, breaks = seq(0, 1, by = 0.1),include.lowest = TRUE))
count(test_df_1_b,pred_bin)
ggplot(data=test_df_1_b)+
geom_bar(mapping = aes(x=pred_bin),color="blue")
ggplot(data=test_df_1_b)+
geom_bar(mapping =aes(x=pred_bin,fill=y))+
scale_color_brewer(palette='Set1')
ggplot(data=test_df_1_b)+
geom_bar(mapping =aes(x=pred_bin,fill=y),position = "fill")+
scale_color_brewer(palette='Set1')
my_calcurve_1 <- test_df_1_b %>% tibble()%>%group_by(pred_bin)%>%summarize(prop_event = mean(event))
mid_bin1<-c(0.05,0.15,0.25,0.35,0.45,0.55,0.65,0.75,0.85,0.95)
my_calcurve_1$mid_bin<-mid_bin1
my_calcurve_1
my_calcurve_1%>%ggplot(mapping = aes(x=mid_bin,y=prop_event))+
geom_line()+
geom_point()+
geom_abline(slope=1,intercept=0,color='grey',linetype='dashed')+
coord_equal(xlim = c(0,1),ylim = c(0,1))
pred_test_3<-predict(mod_3_roc,df_test,type = 'prob')
head(pred_test_3)
pred_test_8<-predict(mod_8_roc,df_test,type = 'prob')
head(pred_test_8)
test_df_3 <- df_test %>% bind_cols(pred_test_3)
test_df_8 <- df_test %>% bind_cols(pred_test_8)
test_df_3_b<-test_df_3%>%mutate(pred_bin=cut(pred_test_3$event, breaks = seq(0, 1, by = 0.1),include.lowest = TRUE))
test_df_8_b<-test_df_8%>%mutate(pred_bin=cut(pred_test_8$event, breaks = seq(0, 1, by = 0.1),include.lowest = TRUE))
ggplot(data=test_df_3_b)+
geom_bar(mapping = aes(x=pred_bin),color="blue")
ggplot(data=test_df_8_b)+
geom_bar(mapping = aes(x=pred_bin),color="blue")
my_calcurve_3 <- test_df_3_b %>% tibble()%>%group_by(pred_bin)%>%summarize(prop_event = mean(event))
my_calcurve_3$mid_bin<-mid_bin1
my_calcurve_3
my_calcurve_8 <- test_df_8_b %>% tibble()%>%group_by(pred_bin)%>%summarize(prop_event = mean(event))
mid_bin2<-c(0.35,0.45,0.55,0.65,0.75)
my_calcurve_8$mid_bin<-mid_bin2
my_calcurve_8
my_calcurve_3%>%ggplot(mapping = aes(x=mid_bin,y=prop_event))+
geom_line()+
geom_point()+
geom_abline(slope=1,intercept=0,color='grey',linetype='dashed')+
coord_equal(xlim = c(0,1),ylim = c(0,1))
my_calcurve_8%>%ggplot(mapping = aes(x=mid_bin,y=prop_event))+
geom_line()+
geom_point()+
geom_abline(slope=1,intercept=0,color='grey',linetype='dashed')+
coord_equal(xlim = c(0,1),ylim = c(0,1))
caret::calibration(test_df_1$y ~ test_df_1$event ,test_df_1,cuts = 10)%>%xyplot()
caret::calibration(test_df_3$y ~ test_df_3$event,test_df_3,cuts = 10)%>%xyplot()
caret::calibration(test_df_8$y ~ test_df_8$event,test_df_8,cuts = 10)%>%xyplot()
